{"version":3,"sources":["webpack://WS/webpack/universalModuleDefinition","webpack://WS/webpack/bootstrap","webpack://WS/./node_modules/waveshaper/dist/waveshaper.js","webpack://WS/external {\"root\":\"Hammer\",\"commonjs2\":\"hammerjs\",\"commonjs\":\"hammerjs\",\"amd\":\"hammerjs\",\"umd\":\"hammerjs\"}","webpack://WS/./src/index.ts","webpack://WS/./src/core/domrender-waveshaper.ts","webpack://WS/./src/config/hammerconfig.ts","webpack://WS/./src/interactions/cut.ts","webpack://WS/./src/interactions/drag.ts","webpack://WS/./src/interactions/pan.ts","webpack://WS/./src/interactions/zoom.ts","webpack://WS/./src/interactions/resize.ts","webpack://WS/./src/render/line.ts","webpack://WS/./src/interactions/enter.ts","webpack://WS/./src/config/dom-config.ts","webpack://WS/./src/models/dragstate.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__1__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","./node_modules/weighted-interval-merge/dist/weighted-interval-merge.js","_extends","assign","target","arguments","length","source","calcStart","interval","start","offsetStart","copy","intervals","map","index","normalizeIndex","preNormalizeIndex","Number","MIN_SAFE_INTEGER","forEach","el","sort","a","b","cmp","groupByIndex","reduce","groups","push","weightedMerge","grouped","flattened","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","keys","iterator","next","done","merged","merge","combine","err","return","result","current","end","highIndexes","lowIndexes","highIndex","lowIndex","high","low","weightedIntervalMerge","sorted","normalized","copied","./src/config/managerconfig.ts","default","scrollPosition","samplesPerPixel","resolution","meterType","width","samplerate","./src/core/track.ts","peak_1","rms_1","weighted_interval_merge_1","Track","id","this","_lastValue","Float32Array","_flattened","slice","configurable","flatten","getDuration","Math","max","apply","calculate","options","dataMap","shift","./src/core/waveshaper.ts","__assign","track_1","managerconfig_1","WaveShaper","tracks","Map","audioData","callbackMap","segmentCallbackMap","Array","optionsCallbacks","_activeWaveShapers","validateOptions","_options","_lastProcessResult","_duration","timeToPosition","time","positionToTime","position","ids","_this","getProcessIds","waveShaper","getTrack","process","toProcess","data","wave","peaks","invokeCallbacks","on","callBack","callbackArray","set","off","indexOf","splice","onSegment","cb","offSegment","emitSegment","old","changed","onOptions","offOptions","emitOptions","updated","setOptions","oldOptions","setTracks","_i","track","foundWave","setData","setActive","clearTracks","removeCallbacksById","delete","currentOptions","trackResult","callbacks","j","callback","from","values","maxDuration","duration","./src/index.ts","waveshaper_1","defaultConfig","rms","peak","./src/strategies/peak.ts","startPosition","lastValue","sampleSize","ceil","startSecond","secondsPerPixel","calcStartSecond","calcEndSecond","absShift","abs","shiftTarget","shiftStart","buffer","copyWithin","fill","currentIntervalIndex","findIndex","maxIntervalIncrementIndex","currentInterval","currentSecond","startBorder","endBorder","intervalBorder","secondsIntoInterval","startSample","floor","endSample","length_1","loopEnd","min","sample","./src/strategies/rms.ts","posSum","negSum","count","val","sqrt","domrender_waveshaper_1","DomRenderWaveShaper","Hammer","hammerconfig_1","cut_1","drag_1","pan_1","zoom_1","resize_1","line_1","enter_1","dom_config_1","dragstate_1","_super","unregister","unregisterMap","canvasMap","cutCallbacks","__extends","_hammer","input","registerCanvas","canvas","color","ctx","getContext","Error","classList","add","setAttribute","style","height","scale","devicePixelRatio","unregisterCanvas","dragState","registerSetsActive","activeWaveShapers","concat","unregisterEvents","filter","trackId","emitCut","original","left","right","onCut","loadData","dat","fetch","url","then","res","arrayBuffer","decodeAudioData","audioBuffer","getChannelData","catch","e","console","log","setInteraction","element","hammer","destroy","clearInteraction","hammerOptions","touchAction","recognizers","Pan","direction","DIRECTION_HORIZONTAL","Pinch","enable","Tap","manager","ev","getEventTarget","srcEvent","hasAttribute","shouldHandle","getAttribute","bb","getBoundingClientRect","deltaX","center","x","clampFn","find","generateId","segment","startState","PointerEvent","setPointerCapture","pointerId","activeSegment","activeSegmentStart","dragWave","dragging","change","newTime","endMargin","panState","panStart","panMax","scrollWidth","newPosition","zoomState","maxWidth","sppStart","sampleAtLeft","samplesToCenter","newSpp","newSamplesInView","newSamplesToCenter","newScroll","resizeState","activeSegmentSide","activeSegmentOffsetStart","activeSegmentOffsetEnd","active","waveform","fillStyle","clearRect","inSegment","segmentStart","pointInSegment","fillRect","beginPath","moveTo","lineTo","round","closePath","rect","enterlistener","pointerEnter","addEventListener","document","elementFromPoint","clientX","clientY","HTMLCanvasElement","currentId","removeEventListener","defaultDomOptions","random","toString"],"mappings":"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","file":"waveshaper-dom.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"hammerjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"hammerjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WS\"] = factory(require(\"hammerjs\"));\n\telse\n\t\troot[\"WS\"] = factory(root[\"Hammer\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__1__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"waveshaper\"] = factory();\n\telse\n\t\troot[\"waveshaper\"] = factory();\n})(window, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"./node_modules/weighted-interval-merge/dist/weighted-interval-merge.js\":\n/*!******************************************************************************!*\\\n  !*** ./node_modules/weighted-interval-merge/dist/weighted-interval-merge.js ***!\n  \\******************************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n(function (global, factory) {\n   true ? factory(exports) :\n  undefined;\n}(this, (function (exports) { 'use strict';\n\n  var _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  /**\r\n   * @typedef {Object} Interval\r\n   * \r\n   * @property {number} start\r\n   * @property {number} offsetStart\r\n   * @property {number} end\r\n   * @property {number} index\r\n   */\n\n  /**\r\n   * @typedef {{[key: string]: Interval}} IntervalMap\r\n   */\n\n  /**\r\n   * @param {Interval} interval\r\n   */\n  var calcStart = function calcStart(interval) {\n    return interval.start + interval.offsetStart;\n  };\n\n  /**\r\n   * The algorithm first calculates real start and end times of each segment,\r\n   * sorts them by priority, then start time.\r\n   *\r\n   * Finally it merges the segments by index so there are no overlapping\r\n   * segments and those with highest index are on top.\r\n   *\r\n   * @export\r\n   * @param {Interval[]} intervals Segments to flatten\r\n   * @returns {Interval[]} flattened Interval array\r\n   */\n  var weightedIntervalMerge = function weightedIntervalMerge(intervals) {\n    if (intervals == null || intervals.length === 0) return [];\n\n    var sorted = sort(intervals);\n    var normalized = normalizeIndex(sorted);\n    var copied = copy(normalized);\n    var grouped = groupByIndex(copied);\n\n    return weightedMerge(grouped);\n  };\n\n  /**\r\n   * Copies elements so original are unaltered\r\n   * \r\n   * @param {Interval[]} intervals \r\n   */\n  var copy = function copy(intervals) {\n    return intervals.map(function (i) {\n      return _extends({}, i, {\n        offsetStart: i.offsetStart || 0,\n        index: i.index || 1\n      });\n    });\n  };\n\n  /**\r\n   * When an element is altered the index is set very high,\r\n   * this functions normalizes to indexes back to 0\r\n   * \r\n   * @param {Intervalp[]} intervals \r\n   */\n  var normalizeIndex = function normalizeIndex(intervals) {\n    var index = 0;\n    var preNormalizeIndex = Number.MIN_SAFE_INTEGER;\n    intervals.forEach(function (el) {\n      if (el.index > preNormalizeIndex) {\n        preNormalizeIndex = el.index;\n        el.index = ++index;\n      } else {\n        el.index = index;\n      }\n    });\n    return intervals;\n  };\n\n  /**\r\n   * Sorts the intervals by index, then by start\r\n   * \r\n   * @param {Interval[]} intervals \r\n   * @return {Interval[]} Interval array\r\n   */\n  var sort = function sort(intervals) {\n    return intervals.sort(function (a, b) {\n      return cmp(a.index, b.index) || cmp(calcStart(a), calcStart(b));\n    });\n  };\n\n  /**\r\n   * Returns a map of intervals grouped by the key property\r\n   * \r\n   * @param {Interval[]} intervals \r\n   * @returns {IntervalMap} Map of index => interval[]\r\n   */\n  var groupByIndex = function groupByIndex(intervals) {\n    return intervals.reduce(function (groups, interval) {\n      (groups[interval.index] = groups[interval.index] || []).push(interval);\n      return groups;\n    }, {});\n  };\n\n  /**\r\n   * Merges all the groups by index\r\n   * \r\n   * @param {IntervalMap} grouped \r\n   * @returns {Interval[]} Interval array\r\n   */\n  var weightedMerge = function weightedMerge(grouped) {\n    var flattened = null;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = Object.keys(grouped)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var index = _step.value;\n\n        var merged = merge(grouped[index]);\n        if (flattened == null) {\n          flattened = merged;\n        } else {\n          flattened = combine(merged, flattened);\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return flattened;\n  };\n\n  /**\r\n   * Merges a set of intervals with the same index and remove any overlaps, left to right\r\n   * \r\n   * @param {Interval[]} intervals \r\n   * @returns {Interval[]} Interval array\r\n   */\n  var merge = function merge(intervals) {\n    if (intervals.length <= 1) return intervals;\n\n    var result = [];\n\n    var current = intervals[0];\n    for (var i = 1; i < intervals.length; i++) {\n      var next = intervals[i];\n\n      // If current is completely overlapped by second it is merged into it\n      if (current.end >= next.end) {\n        continue;\n        // Resolves partial overlaps by setting end of current to start of next\n      } else if (calcStart(next) < current.end) {\n        result.push(_extends({}, current, { end: calcStart(next) }));\n        current = next;\n      } else {\n        // No overlap, push onto results\n        result.push(current);\n        current = next;\n      }\n    }\n\n    result.push(current);\n    return result;\n  };\n\n  /**\r\n   * Given two sets of intervals it merges them so the highIndexes set has priority\r\n   *\r\n   * @param {Interval[]} highIndexes\r\n   * @param {Interval[]} lowIndexes\r\n   * \r\n   * @returns {Interval[]} Interval array\r\n   */\n  var combine = function combine(highIndexes, lowIndexes) {\n    var highIndex = 0;\n    var lowIndex = 0;\n\n    var merged = [];\n\n    while (highIndex < highIndexes.length || lowIndex < lowIndexes.length) {\n\n      var high = highIndexes[highIndex];\n      var low = lowIndexes[lowIndex];\n\n      // Only low priority left so push low onto results\n      if (highIndex === highIndexes.length) {\n        merged.push(_extends({}, low));\n        lowIndex++;\n        // Only high priority left so push high onto results\n      } else if (lowIndex === lowIndexes.length) {\n        merged.push(_extends({}, high));\n        highIndex++;\n        // High priority start before or at same time as low\n      } else if (calcStart(high) <= calcStart(low)) {\n        // No overlap between low and high\n        // low:                 ----------------------\n        // high: ---------------\n        if (high.end <= calcStart(low)) ; else if (high.end < low.end) {\n          low.offsetStart = high.end - low.start;\n          // Low index completely overlapped, dismiss it\n          // low:               -----------\n          // high: -------------------------------------\n        } else {\n          lowIndex++;\n        }\n\n        merged.push(_extends({}, high));\n        highIndex++;\n        // Low priority starts before high\n      } else {\n        // No overlap between low and high intervals\n        // low: ---------------\n        // high                ----------------------\n        if (low.end <= calcStart(high)) {\n          merged.push(_extends({}, low));\n          lowIndex++;\n          // Partial overlap where high ends after low\n          // low: ---------------------\n          // high                ----------------------\n        } else if (high.end > low.end) {\n          merged.push(_extends({}, low, { end: calcStart(high) }));\n          lowIndex++;\n          // Partial overlap where high ends before low\n          // low: -------------------------------------\n          // high             -----------\n        } else {\n          merged.push(_extends({}, low, { end: calcStart(high) }));\n          low.offsetStart = high.end - low.start;\n        }\n      }\n    }\n\n    return merged;\n  };\n\n  /**\r\n   *\r\n   * @param {number} a\r\n   * @param {number} b\r\n   */\n  var cmp = function cmp(a, b) {\n    if (a > b) return +1;\n    if (a < b) return -1;\n    return 0;\n  };\n\n  exports.weightedIntervalMerge = weightedIntervalMerge;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n\n/***/ }),\n\n/***/ \"./src/config/managerconfig.ts\":\n/*!*************************************!*\\\n  !*** ./src/config/managerconfig.ts ***!\n  \\*************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar defaultOptions = {\r\n    scrollPosition: 0,\r\n    samplesPerPixel: 1024,\r\n    resolution: 10,\r\n    meterType: 'rms',\r\n    width: 300,\r\n    samplerate: 44100\r\n};\r\nexports.default = defaultOptions;\r\n\n\n/***/ }),\n\n/***/ \"./src/core/track.ts\":\n/*!***************************!*\\\n  !*** ./src/core/track.ts ***!\n  \\***************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar peak_1 = __webpack_require__(/*! ../strategies/peak */ \"./src/strategies/peak.ts\");\r\nvar rms_1 = __webpack_require__(/*! ../strategies/rms */ \"./src/strategies/rms.ts\");\r\nvar weighted_interval_merge_1 = __webpack_require__(/*! weighted-interval-merge */ \"./node_modules/weighted-interval-merge/dist/weighted-interval-merge.js\");\r\nvar Track = /** @class */ (function () {\r\n    function Track(id, intervals, width) {\r\n        this.width = width;\r\n        this._lastValue = new Float32Array(this.width * 4);\r\n        this.id = id;\r\n        this.intervals = intervals || [];\r\n        this._flattened = weighted_interval_merge_1.weightedIntervalMerge(this.intervals);\r\n    }\r\n    Object.defineProperty(Track.prototype, \"flattened\", {\r\n        get: function () {\r\n            return this._flattened.slice();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Track.prototype.flatten = function () {\r\n        this._flattened = weighted_interval_merge_1.weightedIntervalMerge(this.intervals);\r\n    };\r\n    /**\r\n     * Gets the duration of the audio in seconds\r\n     *\r\n     * @returns Decimal value of total duration in seconds\r\n     */\r\n    Track.prototype.getDuration = function () {\r\n        return Math.max.apply(Math, this.intervals.map(function (s) { return s.end; }));\r\n    };\r\n    /**\r\n     * Gets the summerized values for the current settings\r\n     *\r\n     * @param options\r\n     * @param dataMap\r\n     * @returns Two dimensional array, one entry for each pixel, for each pixel a min\r\n     * and a max value.\r\n     */\r\n    Track.prototype.calculate = function (options, dataMap, start, width, shift) {\r\n        switch (options.meterType) {\r\n            case \"peak\":\r\n                this._lastValue = peak_1.default(options, this.flattened, dataMap, start, width, shift, this._lastValue);\r\n                break;\r\n            default:\r\n                this._lastValue = rms_1.default(options, this.flattened, dataMap, start, width, shift, this._lastValue);\r\n                break;\r\n        }\r\n        return this._lastValue;\r\n    };\r\n    return Track;\r\n}());\r\nexports.default = Track;\r\n\n\n/***/ }),\n\n/***/ \"./src/core/waveshaper.ts\":\n/*!********************************!*\\\n  !*** ./src/core/waveshaper.ts ***!\n  \\********************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n            t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar track_1 = __webpack_require__(/*! ./track */ \"./src/core/track.ts\");\r\nvar managerconfig_1 = __webpack_require__(/*! ../config/managerconfig */ \"./src/config/managerconfig.ts\");\r\n/**\r\n *\r\n *\r\n * @export\r\n */\r\nvar WaveShaper = /** @class */ (function () {\r\n    /**\r\n     * @param [options=defaultOptions] Initial options\r\n     * @throws Throws an error if samplerate is null or NaN\r\n     */\r\n    function WaveShaper(options) {\r\n        if (options === void 0) { options = managerconfig_1.default; }\r\n        /**\r\n         * Map of waveshapers managed by the manager\r\n         *\r\n         * @readonly\r\n         * @memberof WaveShaper\r\n         */\r\n        this.tracks = new Map();\r\n        /**\r\n         * Map of audio data\r\n         *\r\n         * @readonly\r\n         * @memberof WaveShaper\r\n         */\r\n        this.audioData = new Map();\r\n        /**\r\n         * @description Map of callback functions\r\n         *\r\n         * @readonly\r\n         * @memberof WaveShaper\r\n         */\r\n        this.callbackMap = new Map();\r\n        /**\r\n         * @description Segment callback functions\r\n         *\r\n         * @readonly\r\n         * @memberof WaveShaper\r\n         */\r\n        this.segmentCallbackMap = new Array();\r\n        /**\r\n         * @description Options callbacks\r\n         *\r\n         * @readonly\r\n         * @memberof WaveShaper\r\n         */\r\n        this.optionsCallbacks = new Array();\r\n        this._activeWaveShapers = [];\r\n        this.validateOptions(options);\r\n        this._options = __assign({}, managerconfig_1.default, options);\r\n    }\r\n    Object.defineProperty(WaveShaper.prototype, \"options\", {\r\n        /**\r\n         * @description Currect settings\r\n         *\r\n         * @readonly\r\n         * @memberof WaveShaper\r\n         */\r\n        get: function () {\r\n            return __assign({}, this._options);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WaveShaper.prototype, \"activeWaveShapers\", {\r\n        /**\r\n         * @description Active id's, redraws when draw is called without argument\r\n         *\r\n         * @readonly\r\n         * @unused\r\n         * @memberof WaveShaper\r\n         */\r\n        get: function () {\r\n            return this._activeWaveShapers.slice();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WaveShaper.prototype, \"lastProcessResult\", {\r\n        /**\r\n         * @description Last result of calling process, argument given to all callbacks\r\n         *\r\n         * @readonly\r\n         * @memberof WaveShaper\r\n         */\r\n        get: function () {\r\n            return this._lastProcessResult;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WaveShaper.prototype, \"duration\", {\r\n        /**\r\n         * @description Total duration of all tracks\r\n         *\r\n         * @readonly\r\n         * @memberof WaveShaper\r\n         */\r\n        get: function () {\r\n            return this._duration;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Gives the position corresponding to a given time\r\n     *\r\n     * @param time\r\n     */\r\n    WaveShaper.prototype.timeToPosition = function (time) {\r\n        return (time * this._options.samplerate) / this._options.samplesPerPixel;\r\n    };\r\n    /**\r\n     * Gives the time corresponding to a given position\r\n     * @param position\r\n     */\r\n    WaveShaper.prototype.positionToTime = function (position) {\r\n        return ((position * this._options.samplesPerPixel) / this._options.samplerate);\r\n    };\r\n    /**\r\n     * @description Flattens the segments of the given waveshaper id\r\n     *\r\n     * @param id\r\n     * @returns WaveShaper instance\r\n     */\r\n    WaveShaper.prototype.flatten = function (ids) {\r\n        var _this = this;\r\n        if (ids === void 0) { ids = []; }\r\n        this.getProcessIds(ids).forEach(function (id) {\r\n            var waveShaper = _this.getTrack(id);\r\n            if (waveShaper != null)\r\n                waveShaper.flatten();\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * Processes all relevant WaveShapers and invokes registered callbacks\r\n     *\r\n     * @param ids Options array of id's to draw\r\n     * @param start Start position\r\n     * @param width Width to process\r\n     * @param shift Units to shift current data\r\n     *\r\n     * @returns WaveShaper instance\r\n     */\r\n    WaveShaper.prototype.process = function (ids, start, width, shift) {\r\n        if (ids === void 0) { ids = []; }\r\n        if (start === void 0) { start = 0; }\r\n        if (width === void 0) { width = this.options.width; }\r\n        if (shift === void 0) { shift = 0; }\r\n        var toProcess = this.getProcessIds(ids);\r\n        var options = __assign({}, this.options);\r\n        var data = [];\r\n        for (var i = 0; i < toProcess.length; i++) {\r\n            var id = toProcess[i];\r\n            var wave = this.getTrack(id);\r\n            if (wave == null)\r\n                continue;\r\n            var peaks = wave.calculate(options, this.audioData, start, width, shift);\r\n            data.push({ id: id, data: peaks });\r\n        }\r\n        // Invoke callbacks after returning value.\r\n        this._lastProcessResult = { options: options, data: data };\r\n        this.invokeCallbacks(this._lastProcessResult, start, width, shift);\r\n        return this;\r\n    };\r\n    /**\r\n     * Registers a callback that fires when the track with given id is processed\r\n     *\r\n     * @param id id of Track to register to\r\n     * @param callBack will be invoked when the given track is processed\r\n     *\r\n     * @returns WaveShaper instance\r\n     */\r\n    WaveShaper.prototype.on = function (id, callBack) {\r\n        var callbackArray = this.callbackMap.get(id);\r\n        if (callbackArray == null) {\r\n            this.callbackMap.set(id, [callBack]);\r\n        }\r\n        else {\r\n            callbackArray.push(callBack);\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Unregisters a callback from the given track, will no longer be called\r\n     *\r\n     * @param id id of Track to unregister from\r\n     * @param callBack callback to remove\r\n     *\r\n     * @returns WaveShaper instance\r\n     */\r\n    WaveShaper.prototype.off = function (id, callBack) {\r\n        var callbackArray = this.callbackMap.get(id);\r\n        if (callbackArray == null)\r\n            return this;\r\n        var index = callbackArray.indexOf(callBack);\r\n        if (index < 0)\r\n            return this;\r\n        callbackArray = callbackArray.splice(index, 1);\r\n        return this;\r\n    };\r\n    /**\r\n     * Adds a callback that is triggered when an Interval is updated\r\n     *\r\n     * @param cb Callback function\r\n     */\r\n    WaveShaper.prototype.onSegment = function (cb) {\r\n        this.segmentCallbackMap.push(cb);\r\n    };\r\n    /**\r\n     * Removes a previously added callback for the Interval update callback\r\n     *\r\n     * @param cb Callback function\r\n     */\r\n    WaveShaper.prototype.offSegment = function (cb) {\r\n        var index = this.segmentCallbackMap.indexOf(cb);\r\n        if (index !== -1) {\r\n            this.segmentCallbackMap.splice(index, 1);\r\n        }\r\n    };\r\n    /**\r\n     * Emits a segment update\r\n     *\r\n     * @param old Old interval\r\n     * @param changed Updated interval\r\n     */\r\n    WaveShaper.prototype.emitSegment = function (old, changed) {\r\n        this.segmentCallbackMap.forEach(function (cb) { return cb(old, changed); });\r\n    };\r\n    /**\r\n     * Adds a callback that is fired when options are updated\r\n     *\r\n     * @param cb Callback function\r\n     */\r\n    WaveShaper.prototype.onOptions = function (cb) {\r\n        this.optionsCallbacks.push(cb);\r\n    };\r\n    /**\r\n     * Removes a previously added callback\r\n     * @param cb Callback function\r\n     */\r\n    WaveShaper.prototype.offOptions = function (cb) {\r\n        var index = this.optionsCallbacks.indexOf(cb);\r\n        if (index !== -1) {\r\n            this.optionsCallbacks.splice(index, 1);\r\n        }\r\n    };\r\n    /**\r\n     * Emits an options update\r\n     *\r\n     * @param old Old options\r\n     * @param updated New options\r\n     */\r\n    WaveShaper.prototype.emitOptions = function (old, updated) {\r\n        this.optionsCallbacks.forEach(function (cb) { return cb(old, updated); });\r\n    };\r\n    /**\r\n     * @description Merges the given options into the current and returns updated options\r\n     *\r\n     * @param options A (partial) ManagerOptions object\r\n     * @returns WaveShaper instance\r\n     */\r\n    WaveShaper.prototype.setOptions = function (options) {\r\n        this.validateOptions(options);\r\n        var oldOptions = __assign({}, this.options);\r\n        this._options = __assign({}, oldOptions, options);\r\n        this.emitOptions(oldOptions, this.options);\r\n        return this;\r\n    };\r\n    /**\r\n     * @description Adds a waveshaper to the manager\r\n     *\r\n     * @param id id of WaveShaper\r\n     * @param segments Segments in wave\r\n     * @param color Background color of segments\r\n     *\r\n     * @returns WaveShaper instance\r\n     */\r\n    WaveShaper.prototype.setTracks = function () {\r\n        var tracks = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            tracks[_i] = arguments[_i];\r\n        }\r\n        for (var i = 0; i < tracks.length; i++) {\r\n            var track = tracks[i];\r\n            var foundWave = this.getTrack(track.id);\r\n            if (foundWave == null) {\r\n                var wave = new track_1.default(track.id, track.intervals, this._options.width);\r\n                this.tracks.set(track.id, wave);\r\n            }\r\n            else {\r\n                foundWave.intervals = track.intervals || [];\r\n                foundWave.flatten();\r\n            }\r\n        }\r\n        this._duration = this.getDuration();\r\n        return this;\r\n    };\r\n    /**\r\n     * @description Adds audio data to the waveshaper and redraws waveshapers using it\r\n     *\r\n     * @param id  Data id, refered to by source parameter of segments\r\n     * @param data AudioBuffer with audio data\r\n     *\r\n     * @returns WaveShaper instance\r\n     */\r\n    WaveShaper.prototype.setData = function () {\r\n        var _this = this;\r\n        var data = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            data[_i] = arguments[_i];\r\n        }\r\n        data.forEach(function (d) {\r\n            _this.audioData.set(d.id, d.data);\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * @description The given id's are set as the active waveshapers, process only processes these when set,\r\n     * call with no values to allways process all values (default)\r\n     *\r\n     * @param ids Waveshaper id's to set as active\r\n     *\r\n     * @returns WaveShaper instance\r\n     */\r\n    WaveShaper.prototype.setActive = function () {\r\n        var ids = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            ids[_i] = arguments[_i];\r\n        }\r\n        this._activeWaveShapers = ids;\r\n        return this;\r\n    };\r\n    /**\r\n     * @description Removes the waves and all callbacks with given id from the manager\r\n     *\r\n     * @param id\r\n     *\r\n     * @returns WaveShaper instance\r\n     */\r\n    WaveShaper.prototype.clearTracks = function () {\r\n        var _this = this;\r\n        var ids = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            ids[_i] = arguments[_i];\r\n        }\r\n        ids.forEach(function (id) {\r\n            _this.removeCallbacksById(id);\r\n            _this.tracks.delete(id);\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * @description Gets Track with given id\r\n     *\r\n     * @param id\r\n     * @returns Track with given ID\r\n     */\r\n    WaveShaper.prototype.getTrack = function (id) {\r\n        return this.tracks.get(id);\r\n    };\r\n    /**\r\n     * Validates given options\r\n     *\r\n     * @param options\r\n     * @returns true if valid, false if not\r\n     */\r\n    WaveShaper.prototype.validateOptions = function (options) {\r\n        var currentOptions = this._options || managerconfig_1.default;\r\n        if (!options.samplesPerPixel || options.samplesPerPixel <= 0) {\r\n            options.samplesPerPixel = currentOptions.samplesPerPixel;\r\n        }\r\n        if (!options.meterType) {\r\n            options.meterType = currentOptions.meterType;\r\n        }\r\n        if (!options.resolution || options.resolution <= 0) {\r\n            options.resolution = currentOptions.resolution;\r\n        }\r\n        if (!options.width || this.options.width <= 0) {\r\n            options.width = currentOptions.width;\r\n        }\r\n        if (!options.scrollPosition || this.options.scrollPosition <= 0) {\r\n            options.scrollPosition = currentOptions.scrollPosition;\r\n        }\r\n        if (!options.samplerate || this.options.samplerate <= 0) {\r\n            options.samplerate = currentOptions.samplerate;\r\n        }\r\n    };\r\n    /**\r\n     * Invokes all registered callbacks registered to a waveshaper id in the data list\r\n     *\r\n     * @param options\r\n     * @param data\r\n     */\r\n    WaveShaper.prototype.invokeCallbacks = function (result, start, width, shift) {\r\n        for (var i = 0; i < result.data.length; i++) {\r\n            var trackResult = result.data[i];\r\n            var callbacks = this.callbackMap.get(trackResult.id);\r\n            if (callbacks == null)\r\n                continue;\r\n            for (var j = 0; j < callbacks.length; j++) {\r\n                var callback = callbacks[j];\r\n                callback(result.options, new Float32Array(trackResult.data), start, width, shift);\r\n            }\r\n        }\r\n    };\r\n    WaveShaper.prototype.getProcessIds = function (ids) {\r\n        if (ids.length > 0)\r\n            return ids;\r\n        if (this._activeWaveShapers.length > 0)\r\n            return this._activeWaveShapers;\r\n        return Array.from(this.tracks.keys());\r\n    };\r\n    WaveShaper.prototype.removeCallbacksById = function (id) {\r\n        var callbackArray = this.callbackMap.get(id);\r\n        if (callbackArray == null)\r\n            return;\r\n        callbackArray.splice(0, callbackArray.length);\r\n        this.callbackMap.delete(id);\r\n    };\r\n    /**\r\n     * @description Returns the maximum duration of all the waveshapers managed by this class\r\n     *\r\n     * @returns Maximum duration in seconds\r\n     * @memberof WaveShaper\r\n     */\r\n    WaveShaper.prototype.getDuration = function () {\r\n        return Array.from(this.tracks.values()).reduce(function (maxDuration, waveShaper) {\r\n            var duration = waveShaper.getDuration();\r\n            return duration > maxDuration ? duration : maxDuration;\r\n        }, 0);\r\n    };\r\n    return WaveShaper;\r\n}());\r\nexports.default = WaveShaper;\r\n\n\n/***/ }),\n\n/***/ \"./src/index.ts\":\n/*!**********************!*\\\n  !*** ./src/index.ts ***!\n  \\**********************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar waveshaper_1 = __webpack_require__(/*! ./core/waveshaper */ \"./src/core/waveshaper.ts\");\r\nexports.WaveShaper = waveshaper_1.default;\r\nvar track_1 = __webpack_require__(/*! ./core/track */ \"./src/core/track.ts\");\r\nexports.Track = track_1.default;\r\nvar managerconfig_1 = __webpack_require__(/*! ./config/managerconfig */ \"./src/config/managerconfig.ts\");\r\nexports.defaultConfig = managerconfig_1.default;\r\nvar rms_1 = __webpack_require__(/*! ./strategies/rms */ \"./src/strategies/rms.ts\");\r\nexports.rms = rms_1.default;\r\nvar peak_1 = __webpack_require__(/*! ./strategies/peak */ \"./src/strategies/peak.ts\");\r\nexports.peak = peak_1.default;\r\n\n\n/***/ }),\n\n/***/ \"./src/strategies/peak.ts\":\n/*!********************************!*\\\n  !*** ./src/strategies/peak.ts ***!\n  \\********************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Calculates peak values\r\n *\r\n * @export\r\n * @param resolution\r\n * @param samplesPerPixel\r\n * @param width\r\n * @param intervals\r\n * @param scrollPosition\r\n * @param sampleRate\r\n * @param dataMap\r\n * @returns\r\n */\r\nexports.default = (function (options, intervals, dataMap, startPosition, width, shift, lastValue) {\r\n    var sampleSize = Math.ceil(options.samplesPerPixel / options.resolution);\r\n    var start = options.scrollPosition * options.samplesPerPixel;\r\n    var startSecond = start / options.samplerate;\r\n    var secondsPerPixel = options.samplesPerPixel / options.samplerate;\r\n    var calcStartSecond = startSecond + startPosition * secondsPerPixel;\r\n    var calcEndSecond = calcStartSecond + width * secondsPerPixel;\r\n    var absShift = Math.abs(shift) * 4;\r\n    var shiftTarget = shift > 0 ? 0 : absShift;\r\n    var shiftStart = shift > 0 ? absShift : 0;\r\n    var peaks = new Float32Array(lastValue.buffer)\r\n        .copyWithin(shiftTarget, shiftStart)\r\n        .fill(0, startPosition * 4, (startPosition + width) * 4);\r\n    var currentIntervalIndex = intervals.findIndex(function (i) { return i.end > calcStartSecond && i.start + i.offsetStart < calcEndSecond; });\r\n    // There are no intervals in this range so return empty array\r\n    if (currentIntervalIndex === -1)\r\n        return peaks;\r\n    var maxIntervalIncrementIndex = intervals.length - 1;\r\n    var currentInterval = intervals[currentIntervalIndex];\r\n    var buffer = dataMap.get(currentInterval.source);\r\n    // For each pixel we display\r\n    for (var i = startPosition; i < startPosition + width; i++) {\r\n        var currentSecond = startSecond + i * secondsPerPixel;\r\n        if (currentSecond >= currentInterval.end) {\r\n            if (currentIntervalIndex === maxIntervalIncrementIndex) {\r\n                return peaks;\r\n            }\r\n            else {\r\n                currentInterval = intervals[++currentIntervalIndex];\r\n                buffer = dataMap.get(currentInterval.source);\r\n            }\r\n        }\r\n        if (currentInterval.start + currentInterval.offsetStart > currentSecond) {\r\n            peaks.set([0, 0, 0, 0], i * 4);\r\n            continue;\r\n        }\r\n        var startBorder = currentSecond - secondsPerPixel <\r\n            currentInterval.start + currentInterval.offsetStart;\r\n        var endBorder = currentSecond + secondsPerPixel > currentInterval.end;\r\n        var intervalBorder = startBorder || endBorder ? 1 : 0;\r\n        if (buffer == null) {\r\n            peaks.set([0, 0, intervalBorder, 1], i * 4);\r\n            continue;\r\n        }\r\n        var secondsIntoInterval = currentSecond - currentInterval.start;\r\n        var startSample = Math.floor(secondsIntoInterval * options.samplerate);\r\n        var endSample = startSample + options.samplesPerPixel;\r\n        var length_1 = buffer.length;\r\n        var loopEnd = length_1 < endSample ? length_1 : endSample;\r\n        // Cycle through the data-points relevant to the pixel\r\n        // Don't cycle through more than sampleSize frames per pixel.\r\n        var min = 0, max = 0;\r\n        for (var j = startSample; j < loopEnd; j += sampleSize) {\r\n            var sample = buffer[j];\r\n            // Keep track of positive and negative values separately\r\n            if (sample > max)\r\n                max = sample;\r\n            else if (sample < min)\r\n                min = sample;\r\n        }\r\n        peaks.set([min, max, intervalBorder, 1], i * 4);\r\n    }\r\n    return peaks;\r\n});\r\n\n\n/***/ }),\n\n/***/ \"./src/strategies/rms.ts\":\n/*!*******************************!*\\\n  !*** ./src/strategies/rms.ts ***!\n  \\*******************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Calculate rms values\r\n *\r\n * @export\r\n * @param resolution\r\n * @param samplesPerPixel\r\n * @param width\r\n * @param intervals\r\n * @param scrollPosition\r\n * @param sampleRate\r\n * @param dataMap\r\n * @returns\r\n */\r\nexports.default = (function (options, intervals, dataMap, startPosition, width, shift, lastValue) {\r\n    var sampleSize = Math.ceil(options.samplesPerPixel / options.resolution);\r\n    var start = options.scrollPosition * options.samplesPerPixel;\r\n    var startSecond = start / options.samplerate;\r\n    var secondsPerPixel = options.samplesPerPixel / options.samplerate;\r\n    var calcStartSecond = startSecond + startPosition * secondsPerPixel;\r\n    var calcEndSecond = calcStartSecond + width * secondsPerPixel;\r\n    var absShift = Math.abs(shift) * 4;\r\n    var shiftTarget = shift > 0 ? 0 : absShift;\r\n    var shiftStart = shift > 0 ? absShift : 0;\r\n    var peaks = new Float32Array(lastValue.buffer)\r\n        .copyWithin(shiftTarget, shiftStart)\r\n        .fill(0, startPosition * 4, (startPosition + width) * 4);\r\n    var currentIntervalIndex = intervals.findIndex(function (i) { return i.end > calcStartSecond && i.start + i.offsetStart < calcEndSecond; });\r\n    // There are no intervals in this range so return empty array\r\n    if (currentIntervalIndex === -1) {\r\n        return peaks;\r\n    }\r\n    var maxIntervalIncrementIndex = intervals.length - 1;\r\n    var currentInterval = intervals[currentIntervalIndex];\r\n    var buffer = dataMap.get(currentInterval.source);\r\n    // For each pixel we display\r\n    for (var i = startPosition; i < startPosition + width; i++) {\r\n        var currentSecond = startSecond + i * secondsPerPixel;\r\n        if (currentSecond >= currentInterval.end) {\r\n            if (currentIntervalIndex === maxIntervalIncrementIndex) {\r\n                return peaks;\r\n            }\r\n            else {\r\n                currentInterval = intervals[++currentIntervalIndex];\r\n                buffer = dataMap.get(currentInterval.source);\r\n            }\r\n        }\r\n        if (currentInterval.start + currentInterval.offsetStart > currentSecond) {\r\n            peaks.set([0, 0, 0, 0], i * 4);\r\n            continue;\r\n        }\r\n        var startBorder = currentSecond - secondsPerPixel <\r\n            currentInterval.start + currentInterval.offsetStart;\r\n        var endBorder = currentSecond + secondsPerPixel > currentInterval.end;\r\n        var intervalBorder = startBorder || endBorder ? 1 : 0;\r\n        if (buffer == null) {\r\n            peaks.set([0, 0, intervalBorder, 1], i * 4);\r\n            continue;\r\n        }\r\n        var secondsIntoInterval = currentSecond - currentInterval.start;\r\n        var startSample = Math.floor(secondsIntoInterval * options.samplerate);\r\n        var endSample = startSample + options.samplesPerPixel;\r\n        var length_1 = buffer.length;\r\n        var loopEnd = length_1 < endSample ? length_1 : endSample;\r\n        // Cycle through the data-points relevant to the pixel\r\n        // Don't cycle through more than sampleSize frames per pixel.\r\n        var posSum = 0, negSum = 0, count = 0;\r\n        for (var j = startSample; j < loopEnd; j += sampleSize, count++) {\r\n            var val = buffer[j];\r\n            // Keep track of positive and negative values separately\r\n            if (val > 0) {\r\n                posSum += val * val;\r\n            }\r\n            else {\r\n                negSum += val * val;\r\n            }\r\n        }\r\n        var min = -Math.sqrt(negSum / count);\r\n        var max = Math.sqrt(posSum / count);\r\n        peaks.set([min, max, intervalBorder, 1], i * 4);\r\n    }\r\n    return peaks;\r\n});\r\n\n\n/***/ })\n\n/******/ });\n});\n//# sourceMappingURL=waveshaper.js.map","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","import DomRenderWaveShaper from './core/domrender-waveshaper';\r\n\r\nexport {\r\n    DomRenderWaveShaper\r\n}\r\n\r\nexport default new DomRenderWaveShaper();","import { WaveShaper, AudioInterval } from \"waveshaper\";\r\nimport * as Hammer from \"hammerjs\";\r\n\r\nimport hammerConfig from \"../config/hammerconfig\";\r\nimport cut from \"../interactions/cut\";\r\nimport drag from \"../interactions/drag\";\r\nimport pan from \"../interactions/pan\";\r\nimport zoom from \"../interactions/zoom\";\r\nimport resize from \"../interactions/resize\";\r\nimport line from \"../render/line\";\r\nimport enter from \"../interactions/enter\";\r\nimport defaultDomOptions, { DomInput, DomOptions } from \"../config/dom-config\";\r\nimport { dragState } from \"../models/dragstate\";\r\n\r\n/**\r\n * Extends WaveShapeManager to allow for easy canvas rendering registration.\r\n *\r\n * @inheritDoc\r\n */\r\nexport default class DomRenderWaveShaper extends WaveShaper {\r\n  private unregister = () => {};\r\n\r\n  private unregisterMap = new Map<string, () => void>();\r\n  private canvasMap = new Map<string, () => void>();\r\n\r\n  public get scrollWidth(): number {\r\n    return (\r\n      (this._duration * this._options.samplerate) /\r\n      this._options.samplesPerPixel\r\n    );\r\n  }\r\n\r\n  public get options(): DomOptions {\r\n    return { ...this._options };\r\n  }\r\n  protected _options: DomOptions;\r\n\r\n  public get hammer(): HammerManager | null {\r\n    return this._hammer;\r\n  }\r\n  protected _hammer: HammerManager | null;\r\n\r\n  protected cutCallbacks: ((\r\n    original: AudioInterval,\r\n    left: AudioInterval,\r\n    right: AudioInterval\r\n  ) => void)[] = [];\r\n\r\n  constructor(options: DomInput = defaultDomOptions) {\r\n    super(options);\r\n\r\n    this._options = { ...defaultDomOptions, ...this._options };\r\n  }\r\n\r\n  setOptions(input: DomInput) {\r\n    const oldOptions = { ...this.options };\r\n    this._options = { ...oldOptions, ...input };\r\n\r\n    this.emitOptions(oldOptions, this.options);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @description When a canvas is registered through this method each time the\r\n   * waveform is updated the canvas will be rerendered.\r\n   *\r\n   * It returns an unregister method, call to stop receiving callbacks.\r\n   *\r\n   * @param id WaveShaper id to register to.\r\n   * @param canvas Canvas to render to\r\n   * @param color Background color of segments\r\n   */\r\n  registerCanvas(\r\n    id: string,\r\n    canvas: HTMLCanvasElement,\r\n    color: string\r\n  ): DomRenderWaveShaper {\r\n    const ctx = canvas.getContext(\"2d\");\r\n    if (ctx == null) throw Error(\"Cannot get context from canvas.\");\r\n\r\n    // Add classes and data attributes\r\n    canvas.classList.add(\"waveshaper\");\r\n    canvas.setAttribute(\"data-wave-id\", id);\r\n\r\n    canvas.style.width = this.options.width + \"px\";\r\n    canvas.style.height = this.options.height + \"px\";\r\n\r\n    const scale = (devicePixelRatio || 1) < 1 ? 1 : devicePixelRatio || 1;\r\n\r\n    canvas.width = this.options.width * scale;\r\n    canvas.height = this.options.height;\r\n\r\n    ctx.scale(scale, 1);\r\n\r\n    const callBack = (options: DomOptions, data: Float32Array) =>\r\n      line(data, options, ctx, color);\r\n    this.on(id, callBack);\r\n\r\n    this.unregisterCanvas(id);\r\n\r\n    this.canvasMap.set(id, () => this.off(id, callBack));\r\n\r\n    const unregister = enter(this, canvas, dragState);\r\n    this.unregisterMap.set(id, unregister);\r\n\r\n    // If registerSetsActive is true\r\n    if (this._options.registerSetsActive) {\r\n      this.setActive(...this.activeWaveShapers.concat(id));\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Clears the callbacks associated with this canvas\r\n   *\r\n   * @param id\r\n   * @returns Instance of WaveShaper\r\n   */\r\n  unregisterCanvas(id: string): DomRenderWaveShaper {\r\n    const unregister = this.canvasMap.get(id);\r\n    if (unregister != null) {\r\n      unregister();\r\n      this.canvasMap.delete(id);\r\n    }\r\n\r\n    const unregisterEvents = this.unregisterMap.get(id);\r\n    if (unregisterEvents != null) {\r\n      unregisterEvents();\r\n      this.unregisterMap.delete(id);\r\n    }\r\n\r\n    if (this._options.registerSetsActive) {\r\n      const index = this.activeWaveShapers.indexOf(id);\r\n      if (index != -1) {\r\n        this.setActive(\r\n          ...this.activeWaveShapers.filter(trackId => trackId !== id)\r\n        );\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  emitCut(original: AudioInterval, left: AudioInterval, right: AudioInterval) {\r\n    this.cutCallbacks.forEach(cb => cb(original, left, right));\r\n  }\r\n\r\n  onCut(\r\n    cb: (\r\n      original: AudioInterval,\r\n      left: AudioInterval,\r\n      right: AudioInterval\r\n    ) => void\r\n  ) {\r\n    this.cutCallbacks.push(cb);\r\n  }\r\n\r\n  /**\r\n   * Loads and saves a set of url's to audio files.\r\n   *\r\n   * @param ctx\r\n   * @param data\r\n   */\r\n  loadData(\r\n    ctx: AudioContext,\r\n    ...data: { id: string; url: string }[]\r\n  ): DomRenderWaveShaper {\r\n    data.forEach(dat => {\r\n      fetch(dat.url)\r\n        .then(res => res.arrayBuffer())\r\n        .then(arrayBuffer => ctx.decodeAudioData(arrayBuffer))\r\n        .then(audioBuffer => {\r\n          this.setData({\r\n            id: dat.id,\r\n            data: audioBuffer.getChannelData(0)\r\n          }).process();\r\n        })\r\n        .catch(e => console.log(e));\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  setInteraction(element: HTMLElement) {\r\n    if (element == null)\r\n      throw Error(\"Interaction container element could not be found.\");\r\n    this.unregister();\r\n\r\n    element.setAttribute(\"touch-action\", \"none\");\r\n\r\n    const hammer = new Hammer(element, hammerConfig);\r\n    this._hammer = hammer;\r\n\r\n    drag(this, hammer, dragState);\r\n    cut(this, hammer);\r\n    pan(this, hammer);\r\n    zoom(this, hammer);\r\n    resize(this, hammer);\r\n\r\n    this.unregister = () => {\r\n      hammer.destroy();\r\n    };\r\n\r\n    return this;\r\n  }\r\n\r\n  clearInteraction() {\r\n    this.unregister();\r\n    this.unregister = () => {};\r\n\r\n    this._hammer = null;\r\n  }\r\n}\r\n","import * as Hammer from 'hammerjs';\r\n\r\nconst hammerOptions: HammerOptions = {\r\n    touchAction : 'pan-y',\r\n    recognizers: [\r\n        [Hammer.Pan, { direction: Hammer.DIRECTION_HORIZONTAL }],\r\n        [Hammer.Pinch, { enable : true }],\r\n        [Hammer.Tap]\r\n    ]\r\n}\r\n\r\nexport default hammerOptions;","import { AudioInterval } from \"waveshaper\";\r\nimport DomRenderWaveShaper from \"../core/domrender-waveshaper\";\r\nimport { DomOptions } from \"../config/dom-config\";\r\n\r\n/**\r\n * Adds drag functionality to waveshaper\r\n *\r\n * @param manager\r\n * @param hammer\r\n */\r\nexport default (manager: DomRenderWaveShaper, hammer: HammerManager) => {\r\n  const shouldHandle = (target: HTMLElement, options: DomOptions) =>\r\n    options.mode === \"cut\" && target.hasAttribute(\"data-wave-id\");\r\n\r\n  hammer.on(\"tap\", (ev: HammerInput) => {\r\n    const options = manager.options;\r\n    const target = manager.options.getEventTarget(ev.srcEvent);\r\n    if (options == null || !shouldHandle(target, options)) return;\r\n\r\n    // Allready checked for null\r\n    const id = <string>target.getAttribute(\"data-wave-id\");\r\n\r\n    const wave = manager.getTrack(id);\r\n    if (wave == null) return;\r\n\r\n    const bb = target.getBoundingClientRect();\r\n    const deltaX = ev.center.x - bb.left;\r\n    let time =\r\n      (options.scrollPosition + deltaX) *\r\n      (options.samplesPerPixel / options.samplerate);\r\n\r\n    time = options.clampFn(time);\r\n\r\n    const interval = wave.flattened.find(\r\n      i => i.start + i.offsetStart <= time && i.end >= time\r\n    );\r\n    if (interval == null) return;\r\n\r\n    const left = wave.intervals.find(s => s.id === interval.id);\r\n    if (left == null) return;\r\n\r\n    const original = { ...left };\r\n\r\n    const right: AudioInterval = {\r\n      ...left,\r\n      offsetStart: time - left.start,\r\n      id: options.generateId()\r\n    };\r\n\r\n    left.end = time;\r\n    wave.intervals.push(right);\r\n\r\n    manager.flatten([wave.id]);\r\n    manager.process([wave.id], deltaX, 1);\r\n\r\n    manager.emitCut({ ...original }, { ...left }, { ...right });\r\n  });\r\n};\r\n","import DomRenderWaveShaper from '../core/domrender-waveshaper';\r\nimport { DomOptions } from '../config/dom-config';\r\nimport { DragState } from '../models/dragstate';\r\n\r\n/**\r\n * Adds drag functionality to waveshaper\r\n * \r\n * @param manager Waveshape Manager\r\n * @param hammer Hammer instance\r\n * @param container Container element\r\n */\r\nexport default (manager: DomRenderWaveShaper, hammer: HammerManager, dragState: DragState) => {\r\n\r\n    const shouldHandle = (target: HTMLElement, options: DomOptions) => options.mode === 'drag' && target.hasAttribute('data-wave-id');\r\n\r\n    /**\r\n     * Sets up the drag by finding the \r\n     */\r\n    hammer.on('panstart', (ev: HammerInput) => {\r\n        const options = manager.options;\r\n        const target = manager.options.getEventTarget(ev.srcEvent);\r\n        if (!shouldHandle(target, options))\r\n            return;\r\n\r\n        // Allready checked for existance\r\n        const id = <string>target.getAttribute('data-wave-id');\r\n\r\n        const wave = manager.getTrack(id);\r\n        if(wave == null) return;\r\n\r\n        const bb = target.getBoundingClientRect();\r\n        const time = (options.scrollPosition + (ev.center.x - bb.left)) * (options.samplesPerPixel / options.samplerate);\r\n        const interval = wave.flattened.find(i => i.start + i.offsetStart <= time && i.end >= time);\r\n\r\n        if (interval == null)\r\n            return;\r\n\r\n        const segment = wave.intervals.find(s => s.id === interval.id);\r\n        if(segment == null) return;\r\n\r\n        dragState.startState = { ...segment };\r\n\r\n        if(ev.srcEvent instanceof PointerEvent) { \r\n            target.setPointerCapture(ev.srcEvent.pointerId);\r\n        }\r\n\r\n        dragState.options = options;\r\n\r\n        dragState.activeSegment = segment;\r\n        dragState.activeSegmentStart = dragState.activeSegment.start;\r\n        dragState.duration = segment.end - segment.start;\r\n\r\n        dragState.activeSegment.index = 1000;\r\n        dragState.dragWave = wave;\r\n    });\r\n\r\n    hammer.on('panmove', (ev: HammerInput) => {\r\n        const target = manager.options.getEventTarget(ev.srcEvent);\r\n        if (dragState.options == null || dragState.activeSegment == null || dragState.dragWave == null \r\n            || dragState.dragging || !shouldHandle(target, dragState.options))\r\n            return;\r\n\r\n        dragState.dragging = true;\r\n\r\n        /** \r\n         * TODO below implementation stops all updates on touch devices on new track (tested on Samsung Galaxy s8),\r\n         * when dragged back to original keeps working. Works on desktop, it's a small performance improvement as\r\n         * it prevents a single track flatten + process when transferring a segment between tracks.\r\n         */\r\n\r\n        //// If the target has moved it is handled by the mouseHover function\r\n        // const id = ev.target.getAttribute('data-wave-id');\r\n        // if(id !== dragState.dragWave.id)\r\n        //     return;\r\n\r\n        const change = (ev.deltaX * dragState.options.samplesPerPixel) / dragState.options.samplerate;\r\n        let newTime = dragState.activeSegmentStart + change;\r\n\r\n        newTime = manager.options.clampFn(newTime);\r\n\r\n        if (newTime + dragState.activeSegment.offsetStart < 0) {\r\n            newTime = -dragState.activeSegment.offsetStart;\r\n        }\r\n\r\n        dragState.activeSegment.start = newTime;\r\n        dragState.activeSegment.end = newTime + dragState.duration;\r\n\r\n        manager.flatten([dragState.dragWave.id]);\r\n        manager.process([dragState.dragWave.id]);\r\n\r\n        dragState.dragging = false;\r\n    });\r\n\r\n    hammer.on('panend', (ev: HammerInput) => {\r\n        const target = manager.options.getEventTarget(ev.srcEvent);\r\n        if (dragState.options == null || !shouldHandle(target, dragState.options))\r\n            return;\r\n\r\n        if(dragState.startState != null && dragState.activeSegment != null) \r\n            manager.emitSegment(dragState.startState, { ...dragState.activeSegment });\r\n\r\n        dragState.activeSegment = null;\r\n        dragState.activeSegmentStart = 0;\r\n        dragState.dragWave = null;\r\n        dragState.options = null;\r\n        dragState.duration = 0;\r\n        dragState.startState = null;\r\n    });\r\n}","import DomRenderWaveShaper from '../core/domrender-waveshaper';\r\nimport { DomOptions } from '../config/dom-config';\r\n\r\nconst endMargin = 500;\r\n\r\ninterface PanState {\r\n    panStart: number;\r\n    panMax: number;\r\n    options: DomOptions | null;\r\n}\r\n\r\nconst panState: PanState = {\r\n    panStart: 0,\r\n    panMax: 0,\r\n    options: null\r\n}\r\n\r\n/**\r\n * Adds pan functionality to waveshaper\r\n * \r\n * @param manager\r\n * @param hammer\r\n */\r\nexport default function(manager: DomRenderWaveShaper, hammer: HammerManager) {\r\n\r\n    const shouldHandle = (target: HTMLElement, options: DomOptions) => options.mode === 'pan' && target.hasAttribute('data-wave-id');\r\n\r\n    hammer.on('panstart', (ev) => { \r\n        const options = manager.options;\r\n        const target = manager.options.getEventTarget(ev.srcEvent);\r\n        if(!shouldHandle(target, options))\r\n            return;\r\n\r\n        if(ev.srcEvent instanceof PointerEvent) { \r\n            target.setPointerCapture(ev.srcEvent.pointerId);\r\n        }\r\n\r\n        panState.panMax = manager.scrollWidth + endMargin;\r\n        panState.panStart = options.scrollPosition;\r\n    });\r\n\r\n    hammer.on('panmove', (ev) =>  {\r\n        panState.options = manager.options;\r\n        const target = manager.options.getEventTarget(ev.srcEvent);\r\n\r\n        if(!shouldHandle(target, panState.options))\r\n            return;\r\n\r\n        const position = panState.panStart - ev.deltaX;\r\n        const newPosition = Math.floor(position > 0 ? position : 0);\r\n        const change = newPosition - panState.options.scrollPosition;\r\n\r\n        // If it was and is still 0 no need to update\r\n        if(newPosition === panState.options.scrollPosition)\r\n            return;\r\n\r\n        if(newPosition > panState.panMax - panState.options.width)\r\n            return;\r\n        \r\n        const start = change > 0 ? panState.options.width - change : 0;\r\n        const width = Math.abs(change);\r\n        \r\n        manager.setOptions({ scrollPosition: newPosition }).process(undefined, start, width, change);\r\n    });\r\n\r\n    hammer.on('panend', (ev) => {\r\n        const target = manager.options.getEventTarget(ev.srcEvent);\r\n        if(panState.options == null || !shouldHandle(target, panState.options))\r\n            return;\r\n\r\n        panState.options = null;\r\n        panState.panStart = 0;\r\n        panState.panMax = 0;\r\n    });\r\n}","import DomRenderWaveShaper from '../core/domrender-waveshaper';\r\nimport { DomOptions } from '../config/dom-config';\r\n\r\nconst endMargin = 500;\r\n\r\ninterface ZoomState {\r\n    maxWidth: number;\r\n    sppStart: number;\r\n    options: DomOptions | null;\r\n}\r\n\r\nconst zoomState: ZoomState = {\r\n    maxWidth: 0,\r\n    sppStart: 0,\r\n    options: null\r\n}\r\n\r\n/**\r\n * Adds pinch zoom functionality to waveshaper\r\n * \r\n * @param manager\r\n * @param hammer\r\n */\r\nexport default function(manager: DomRenderWaveShaper, hammer: HammerManager) {\r\n\r\n    const shouldHandle = (target: HTMLElement, options: DomOptions) => options.mode === 'pan' && target.hasAttribute('data-wave-id');\r\n\r\n    hammer.on('pinchstart', (ev) => {\r\n        const options = manager.options;\r\n        const target = manager.options.getEventTarget(ev.srcEvent);\r\n        if(!shouldHandle(target, options))\r\n            return;\r\n\r\n        if(ev.srcEvent instanceof PointerEvent) { \r\n            target.setPointerCapture(ev.srcEvent.pointerId);\r\n        }\r\n\r\n        zoomState.sppStart = options.samplesPerPixel;\r\n        zoomState.maxWidth = manager.scrollWidth + endMargin;\r\n    });\r\n\r\n    hammer.on('pinchmove', (ev) => {\r\n        zoomState.options = manager.options;\r\n        const target = manager.options.getEventTarget(ev.srcEvent);\r\n        if(zoomState.options == null || !shouldHandle(target, zoomState.options) || ev.scale == null || ev.scale <= 0)\r\n            return;\r\n\r\n        const sampleAtLeft = zoomState.options.scrollPosition * zoomState.options.samplesPerPixel;\r\n        const samplesInView = zoomState.options.width * zoomState.options.samplesPerPixel;\r\n        const samplesToCenter = samplesInView / 2;\r\n\r\n        const newSpp = zoomState.sppStart * ev.scale;\r\n        if(newSpp == 0) return;\r\n\r\n        const newSamplesInView = zoomState.options.width * newSpp;\r\n        const newSamplesToCenter = newSamplesInView / 2;\r\n\r\n        const maxWidth = manager.scrollWidth + endMargin;\r\n        const maxSamplesInView = maxWidth  * zoomState.options.samplerate;\r\n\r\n        if(newSamplesInView >= maxSamplesInView)\r\n            return;\r\n\r\n        const newScroll = (sampleAtLeft + samplesToCenter - newSamplesToCenter) / newSpp;\r\n\r\n        manager.setOptions({\r\n            samplesPerPixel: newSpp,\r\n            scrollPosition: newScroll >= 0 ? newScroll : 0\r\n        }).process();\r\n    });\r\n\r\n    hammer.on('pinchend', (ev) => {\r\n        const target = manager.options.getEventTarget(ev.srcEvent);\r\n        if(zoomState.options == null || !shouldHandle(target, zoomState.options))\r\n            return;\r\n\r\n        zoomState.sppStart = 0;\r\n        zoomState.maxWidth = 0;\r\n        zoomState.options = null;\r\n    });\r\n}","import { AudioInterval, Track } from \"waveshaper\";\r\nimport DomRenderWaveShaper from \"../core/domrender-waveshaper\";\r\nimport { DomOptions } from \"../config/dom-config\";\r\n\r\ndeclare type SegmentSide = \"left\" | \"right\";\r\n\r\ninterface ResizeState {\r\n  activeSegment: AudioInterval | null;\r\n  activeSegmentSide: SegmentSide | null;\r\n  activeSegmentOffsetStart: number;\r\n  activeSegmentOffsetEnd: number;\r\n  dragWave: Track | null;\r\n  options: DomOptions | null;\r\n  startState: AudioInterval | null;\r\n}\r\n\r\nconst resizeState: ResizeState = {\r\n  activeSegment: null,\r\n  activeSegmentSide: null,\r\n  activeSegmentOffsetStart: 0,\r\n  activeSegmentOffsetEnd: 0,\r\n  dragWave: null,\r\n  options: null,\r\n  startState: null\r\n};\r\n\r\n/**\r\n * Adds drag functionality to waveshaper\r\n *\r\n * @param manager\r\n * @param hammer\r\n */\r\nexport default function(manager: DomRenderWaveShaper, hammer: HammerManager) {\r\n  const shouldHandle = (target: HTMLElement, options: DomOptions) =>\r\n    options.mode === \"resize\" &&\r\n    target != null &&\r\n    target.hasAttribute(\"data-wave-id\");\r\n\r\n  hammer.on(\"panstart\", ev => {\r\n    const options = manager.options;\r\n    const target = manager.options.getEventTarget(ev.srcEvent);\r\n\r\n    if (!shouldHandle(target, options)) return;\r\n\r\n    // Already checked that it exists\r\n    const id = <string>target.getAttribute(\"data-wave-id\");\r\n\r\n    const wave = manager.getTrack(id);\r\n    if (wave == null) return;\r\n\r\n    const bb = target.getBoundingClientRect();\r\n    const time =\r\n      ((options.scrollPosition + (ev.center.x - bb.left)) *\r\n        options.samplesPerPixel) /\r\n      options.samplerate;\r\n\r\n    const interval = wave.flattened.find(\r\n      i => i.start + i.offsetStart <= time && i.end >= time\r\n    );\r\n\r\n    if (interval == null) return;\r\n\r\n    resizeState.activeSegmentSide =\r\n      time <\r\n      interval.start +\r\n        interval.offsetStart +\r\n        (interval.end - (interval.start + interval.offsetStart)) / 2\r\n        ? \"left\"\r\n        : \"right\";\r\n\r\n    const segment = wave.intervals.find(s => s.id === interval.id);\r\n    if (segment == null) return;\r\n\r\n    resizeState.startState = { ...segment };\r\n\r\n    if (ev.srcEvent instanceof PointerEvent) {\r\n      target.setPointerCapture(ev.srcEvent.pointerId);\r\n    }\r\n\r\n    resizeState.options = options;\r\n    resizeState.activeSegment = segment;\r\n\r\n    resizeState.activeSegmentOffsetStart = segment.offsetStart;\r\n    resizeState.activeSegmentOffsetEnd = segment.end;\r\n\r\n    segment.index = 1000;\r\n    resizeState.dragWave = wave;\r\n  });\r\n\r\n  hammer.on(\"panmove\", ev => {\r\n    const target = manager.options.getEventTarget(ev.srcEvent);\r\n    if (\r\n      resizeState.dragWave == null ||\r\n      resizeState.activeSegment == null ||\r\n      resizeState.options == null ||\r\n      !shouldHandle(target, resizeState.options)\r\n    )\r\n      return;\r\n\r\n    const options = manager.options;\r\n\r\n    const change = (ev.deltaX * options.samplesPerPixel) / options.samplerate;\r\n    let newTime =\r\n      resizeState.activeSegmentSide === \"left\"\r\n        ? resizeState.activeSegmentOffsetStart + change\r\n        : resizeState.activeSegmentOffsetEnd + change;\r\n\r\n    newTime = options.clampFn(newTime);\r\n    // Don't allow offset to become less than 0\r\n    if (newTime < 0) {\r\n      newTime = 0;\r\n    }\r\n\r\n    const active = resizeState.activeSegment;\r\n    const newDuration =\r\n      resizeState.activeSegmentSide === \"left\"\r\n        ? active.end - active.start - newTime\r\n        : newTime - active.start - active.offsetStart;\r\n\r\n    // Do not allow resizing\r\n    if (newDuration <= 2) {\r\n      return;\r\n    }\r\n\r\n    resizeState.activeSegmentSide === \"left\"\r\n      ? (active.offsetStart = newTime)\r\n      : (active.end = newTime);\r\n\r\n    manager.flatten([resizeState.dragWave.id]);\r\n    manager.process([resizeState.dragWave.id]);\r\n  });\r\n\r\n  hammer.on(\"panend\", ev => {\r\n    const target = manager.options.getEventTarget(ev.srcEvent);\r\n    if (\r\n      resizeState.options == null ||\r\n      !shouldHandle(target, resizeState.options)\r\n    )\r\n      return;\r\n\r\n    if (resizeState.startState != null && resizeState.activeSegment != null)\r\n      manager.emitSegment(resizeState.startState, {\r\n        ...resizeState.activeSegment\r\n      });\r\n\r\n    resizeState.activeSegment = null;\r\n    resizeState.activeSegmentOffsetStart = 0;\r\n    resizeState.activeSegmentOffsetEnd = 0;\r\n    resizeState.activeSegmentSide = null;\r\n    resizeState.dragWave = null;\r\n    resizeState.options = null;\r\n    resizeState.startState = null;\r\n  });\r\n}\r\n","import { DomOptions } from \"../config/dom-config\";\r\n\r\n/**\r\n * \r\n * \r\n * @export\r\n * @param waveform Sampled data for each pixel, max at 0, min at 1 \r\n * @param options\r\n * @param ctx \r\n * @param color\r\n */\r\nexport default (waveform: Float32Array, options: DomOptions, ctx: CanvasRenderingContext2D, color: string) => {\r\n    const scale = options.height / 2;\r\n    const width = options.width;\r\n    \r\n    ctx.fillStyle = color;\r\n    ctx.clearRect(0, 0, width, options.height);\r\n    \r\n    for(let i = 0, inSegment = false, segmentStart = 0; i < width; i++) {\r\n        const index = i * 4;\r\n        const pointInSegment = waveform[index + 3] === 1;\r\n        if(!inSegment && pointInSegment) {\r\n            inSegment = true;\r\n            segmentStart = i;\r\n        } else if (inSegment && (!pointInSegment || i === width - 1)) {\r\n            inSegment = false;\r\n            ctx.fillRect(segmentStart, 0, i - segmentStart, options.height);\r\n        }\r\n    }\r\n    \r\n    ctx.fillStyle = 'black';\r\n    ctx.beginPath();\r\n    \r\n    ctx.moveTo(0, scale);\r\n    for (let i = 0; i < width; i++) {\r\n        const index = i * 4;\r\n\r\n        ctx.lineTo(i, Math.round((waveform[index] * scale) + scale));\r\n    }\r\n    ctx.lineTo(width - 1, scale);\r\n\r\n    ctx.moveTo(0, scale);\r\n    for (let i = 0; i < width; i++) {\r\n        const index = i * 4;\r\n\r\n        ctx.lineTo(i, Math.round((waveform[index + 1] * scale) + scale));\r\n    }\r\n    ctx.lineTo(width - 1, scale);\r\n    ctx.closePath();\r\n\r\n    for (let i = 0; i < width; i++) {\r\n        const index = i * 4;\r\n        if(waveform[index - 4 + 2] === 0 && waveform[index + 2] === 1) {\r\n            ctx.rect(i, 0, 1, options.height);\r\n        }\r\n    }\r\n    \r\n    ctx.fill();\r\n}","import { DragState } from \"../models/dragstate\";\r\nimport DomRenderWaveShaper from '../core/domrender-waveshaper';\r\n\r\nexport default (manager: DomRenderWaveShaper, canvas: HTMLCanvasElement, dragState: DragState): () => void => {\r\n\r\n    const enterlistener = (ev: PointerEvent) => pointerEnter(ev);\r\n\r\n\r\n    /**\r\n     * Fires when the mouse moves over the container,\r\n     * If a segment is being dragged and the pointer moves\r\n     * into another canvas the segment is tranfered to the \r\n     * new canvas.\r\n     */\r\n    canvas.addEventListener('pointermove', enterlistener);\r\n\r\n    const destroy = () => {\r\n        canvas.removeEventListener('pointermove', enterlistener);\r\n    }\r\n\r\n    const pointerEnter = (ev: PointerEvent) => {\r\n        if (dragState.options == null || dragState.options.mode !== 'drag')\r\n            return;\r\n\r\n        if(dragState.activeSegment == null || dragState.dragWave == null)\r\n            return;\r\n\r\n        const canvas = document.elementFromPoint(ev.clientX, ev.clientY);\r\n        if (canvas == null || !(canvas instanceof HTMLCanvasElement))\r\n            return;\r\n\r\n        const id = canvas.getAttribute('data-wave-id');\r\n        if (id == null) return;\r\n\r\n        const wave = manager.getTrack(id);\r\n        if (wave == null) return;\r\n\r\n        if (dragState.dragWave.id !== id) {\r\n            const index = dragState.dragWave.intervals.indexOf(dragState.activeSegment);\r\n            dragState.dragWave.intervals.splice(index, 1);\r\n\r\n            dragState.activeSegment.trackId = wave.id;\r\n            wave.intervals.push(dragState.activeSegment);\r\n\r\n            dragState.activeSegment.index = 1000;\r\n\r\n            const currentId = dragState.dragWave.id;\r\n            dragState.dragWave = wave;\r\n\r\n            manager.flatten([wave.id, currentId]);\r\n            manager.process([wave.id, currentId]);\r\n        }\r\n    }\r\n\r\n    return destroy;\r\n}","import { defaultConfig, ManagerOptions, ManagerInput } from \"waveshaper\";\r\n\r\nexport type InteractionMode = 'pan' | 'drag' | 'cut' | 'resize';\r\nexport type GenerateId = () => string;\r\nexport type GetTarget = (ev: Event) => HTMLElement;\r\n\r\n\r\nexport interface DomOptions extends ManagerOptions {\r\n    getEventTarget: GetTarget;\r\n    registerSetsActive: boolean;\r\n    height: number;\r\n    generateId: GenerateId;\r\n    mode: InteractionMode;\r\n    clampFn: (n: number) => number;\r\n}\r\n\r\nexport interface DomInput extends ManagerInput {\r\n    getEventTarget?: GetTarget;\r\n    registerSetsActive?: boolean;\r\n    height?: number;\r\n    generateId?: GenerateId;\r\n    mode?: InteractionMode;\r\n    clampFn?: (n: number) => number;\r\n}\r\n\r\nconst defaultDomOptions: DomOptions = {\r\n    ...defaultConfig,\r\n    mode: 'pan',\r\n    height: 150,\r\n    getEventTarget: (ev) => <HTMLElement>ev.target,\r\n    generateId: () => Math.random().toString(),\r\n    registerSetsActive: true,\r\n    clampFn: n => n\r\n}\r\n\r\nexport default defaultDomOptions;","import { AudioInterval, Track } from \"waveshaper\";\r\nimport { DomOptions } from \"../config/dom-config\";\r\n\r\nexport interface DragState {\r\n  activeSegment: AudioInterval | null;\r\n  activeSegmentStart: number;\r\n  dragWave: Track | null;\r\n  options: DomOptions | null;\r\n  duration: number;\r\n  dragging: boolean;\r\n  startState: AudioInterval | null;\r\n}\r\n\r\nexport const dragState: DragState = {\r\n  activeSegment: null,\r\n  activeSegmentStart: 0,\r\n  dragWave: null,\r\n  options: null,\r\n  duration: 0,\r\n  dragging: false,\r\n  startState: null\r\n};\r\n"],"sourceRoot":""}